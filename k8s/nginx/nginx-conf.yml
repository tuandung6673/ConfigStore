apiVersion: v1
kind: ConfigMap
metadata:
  namespace: gms
  name: nginx-conf
data:
  nginx.conf: |
    http{
      server{
        listen 8081;

        client_max_body_size 100M;
      
        # ssl_certificate /etc/nginx/ssl/nginx.crt;
        # ssl_certificate_key /etc/nginx/ssl/nginx.key;

        location @ErrInternal {
          default_type application/json;
                return 500 '{
                  "code": 500,
                  "status": "InternalServerError",
                  "message": "Có lỗi xảy ra"
                }';
            }

        location @ErrUnauthorized {
          default_type application/json;
                return 401 '{
                  "code": 401,
                  "status": "Unauthorized",
                  "message": "Bạn không có quyền truy cập tài nguyên"
                }';
            }

        location @ErrForbidden {
          default_type application/json;
                return 403 '{
                  "code": 403,
                  "status": "Forbidden",
                  "message": "Không xác thực được thông tin người dùng"
                }';
            }

        location / {
          set $cors 'true';
        
          if ($cors = 'true') {
            add_header 'Access-Control-Allow-Origin' "*" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            # required to be able to read Authorization header in frontend
            #add_header 'Access-Control-Expose-Headers' 'Authorization' always;
          }

          if ($request_method = 'OPTIONS') {
            
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
          }
        }

        location /check{
          internal;
          if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
          }
          proxy_pass http://auth-service:15014/auth-service/me;
          proxy_pass_request_body off;
          proxy_set_header Content-Length "";
          proxy_set_header X-Original-URI $request_uri;
          # proxy_set_header Your-Custom-Header $http_api_key;
        }

        location /garbage-service {				
          auth_request /check;
          auth_request_set $auth_status $upstream_status;
          auth_request_set $userId $upstream_http_x_user_id;     
          auth_request_set $userRole $upstream_http_x_user_role;       
          proxy_set_header x-user-id $userId;
          proxy_set_header x-user-role $userRole;

          # Handle authentication failure
          error_page 403 = @ErrForbidden;
          error_page 401 = @ErrUnauthorized;
          error_page 500 = @ErrInternal;
          # proxy_pass http://host.docker.internal:15013/garbage-service;
          proxy_pass http://garbage-service:15013/garbage-service;
        }

        location /users {
          auth_request /check;
          auth_request_set $auth_status $upstream_status;
          auth_request_set $userId $upstream_http_x_user_id;     
          auth_request_set $userRole $upstream_http_x_user_role;       
          proxy_set_header x-user-id $userId;
          proxy_set_header x-user-role $userRole;
          # Handle authentication failure
          error_page 403 = @ErrForbidden;
          error_page 401 = @ErrUnauthorized;
          error_page 500 = @ErrInternal;
          # proxy_pass http://host.docker.internal:15014/auth-service/users;
          proxy_pass http://auth-service:15014/auth-service/users;
        }

        location /roles {
          auth_request /check;
          auth_request_set $auth_status $upstream_status;
          auth_request_set $userId $upstream_http_x_user_id;     
          auth_request_set $userRole $upstream_http_x_user_role;       
          proxy_set_header x-user-id $userId;
          proxy_set_header x-user-role $userRole;
          # Handle authentication failure
          error_page 403 = @ErrForbidden;
          error_page 401 = @ErrUnauthorized;
          error_page 500 = @ErrInternal;
          # proxy_pass http://host.docker.internal:15014/auth-service/roles;
          proxy_pass http://auth-service:15014/auth-service/roles;
        }

        location /auth {
          proxy_pass http://auth-service:15014/auth-service/auth;
        }

        location /me {
          proxy_pass http://auth-service:15014/auth-service/me;
        }

        location /cctv-auth {
          proxy_pass http://auth-service:15014/auth-service/cctv-auth;
        }
      }

      server{
        listen 8082 ssl;

        client_max_body_size 100M;
      
        ssl_certificate /certs/tls.crt;           # fullchain.pem
        ssl_certificate_key /certs/tls.key;       # privkey.pem

        location @ErrInternal {
          default_type application/json;
                return 500 '{
                  "code": 500,
                  "status": "InternalServerError",
                  "message": "Có lỗi xảy ra"
                }';
            }

        location @ErrUnauthorized {
          default_type application/json;
                return 401 '{
                  "code": 401,
                  "status": "Unauthorized",
                  "message": "Bạn không có quyền truy cập tài nguyên"
                }';
            }

        location @ErrForbidden {
          default_type application/json;
                return 403 '{
                  "code": 403,
                  "status": "Forbidden",
                  "message": "Không xác thực được thông tin người dùng"
                }';
            }

        location / {
          set $cors 'true';
        
          if ($cors = 'true') {
            add_header 'Access-Control-Allow-Origin' "*" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            # required to be able to read Authorization header in frontend
            #add_header 'Access-Control-Expose-Headers' 'Authorization' always;
          }

          if ($request_method = 'OPTIONS') {
            
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
          }
        }

        location /check{
          internal;
          if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
          }
          proxy_pass http://auth-service:15014/auth-service/me;
          proxy_pass_request_body off;
          proxy_set_header Content-Length "";
          proxy_set_header X-Original-URI $request_uri;
          # proxy_set_header Your-Custom-Header $http_api_key;
        }

        location /garbage-service {				
          auth_request /check;
          auth_request_set $auth_status $upstream_status;
          auth_request_set $userId $upstream_http_x_user_id;     
          auth_request_set $userRole $upstream_http_x_user_role;       
          proxy_set_header x-user-id $userId;
          proxy_set_header x-user-role $userRole;

          # Handle authentication failure
          error_page 403 = @ErrForbidden;
          error_page 401 = @ErrUnauthorized;
          error_page 500 = @ErrInternal;
          # proxy_pass http://host.docker.internal:15013/garbage-service;
          proxy_pass http://garbage-service:15013/garbage-service;
        }

        location /users {
          auth_request /check;
          auth_request_set $auth_status $upstream_status;
          auth_request_set $userId $upstream_http_x_user_id;     
          auth_request_set $userRole $upstream_http_x_user_role;       
          proxy_set_header x-user-id $userId;
          proxy_set_header x-user-role $userRole;
          # Handle authentication failure
          error_page 403 = @ErrForbidden;
          error_page 401 = @ErrUnauthorized;
          error_page 500 = @ErrInternal;
          # proxy_pass http://host.docker.internal:15014/auth-service/users;
          proxy_pass http://auth-service:15014/auth-service/users;
        }

        location /roles {
          auth_request /check;
          auth_request_set $auth_status $upstream_status;
          auth_request_set $userId $upstream_http_x_user_id;     
          auth_request_set $userRole $upstream_http_x_user_role;       
          proxy_set_header x-user-id $userId;
          proxy_set_header x-user-role $userRole;
          # Handle authentication failure
          error_page 403 = @ErrForbidden;
          error_page 401 = @ErrUnauthorized;
          error_page 500 = @ErrInternal;
          # proxy_pass http://host.docker.internal:15014/auth-service/roles;
          proxy_pass http://auth-service:15014/auth-service/roles;
        }

        location /auth {
          proxy_pass http://auth-service:15014/auth-service/auth;
        }

        location /me {
          proxy_pass http://auth-service:15014/auth-service/me;
        }

        location /cctv-auth {
          proxy_pass http://auth-service:15014/auth-service/cctv-auth;
        }
      }
    }



    events{
      worker_connections 1024;
    }
